<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="icon" href="/favicon.png" type="image/x-icon">
  <link href="https://cdn.jsdelivr.net/npm/remixicon@4.5.0/fonts/remixicon.css" rel="stylesheet">

  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      darkMode: "class",
      theme: {
        extend: {
          screens: {
            lon: "1146px", // Example from previous context
          },
        },
      },
    };
  </script>

  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link href="https://fonts.googleapis.com/css2?family=Roboto+Condensed:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet" />

  <title>Edit Hisaab | KhaataBook</title>
  <style>
    body {
      transition: background-color 0.3s ease, color 0.3s ease;
    }

    /* Custom Checkbox Styles (same as create page for consistency) */
    input.peer-checkbox:checked+label span.custom-checkbox-visual::after {
      content: "\EB7A";
      /* Remixicon 'check' icon unicode */
      font-family: "remixicon";
      font-size: 16px;
      font-weight: 600;
      line-height: 1;
      position: absolute;
      top: 55%;
      left: 50%;
      transform: translate(-50%, -50%);
      color: black;
      /* Default color */
    }


    html.dark input.peer-checkbox:checked+label span.custom-checkbox-visual::after {
      color: white;
      /* Dark mode color */
    }
  </style>
</head>

<body class="bg-zinc-100 dark:bg-zinc-900 text-zinc-900 dark:text-zinc-100 font-['Roboto_Condensed'] min-h-screen">
  <div class="w-full min-h-screen">
    <nav class="w-full h-auto min-h-[8vh] bg-white dark:bg-zinc-800 shadow-md px-4 sm:px-6 lg:px-10 py-3 flex items-center justify-between">
      <h1 class="text-2xl font-semibold text-blue-600 dark:text-blue-400 sm:text-3xl">KhaataBook</h1>
      <div class="hidden gap-y-2 gap-x-5 items-center sm:flex">
        <a class="text-sm font-medium transition-colors text-zinc-700 underline-offset-4 hover:underline dark:text-zinc-300 sm:text-base hover:text-blue-600 dark:hover:text-blue-400" href="/">Home</a>
        <a class="text-sm font-medium transition-colors text-zinc-700 underline-offset-4 hover:underline dark:text-zinc-300 sm:text-base hover:text-blue-600 dark:hover:text-blue-400" href="/create">Create Hisaab</a>
        <a class="text-sm font-medium transition-colors text-zinc-700 underline-offset-4 hover:underline dark:text-zinc-300 sm:text-base hover:text-blue-600 dark:hover:text-blue-400" href="/logout">Logout</a>
        <label class="inline-flex relative items-center cursor-pointer">
          <input class="sr-only peer" id="toggle-theme" type="checkbox" />
          <div class="relative w-[70px] sm:w-[80px] h-[30px] sm:h-[35px] bg-zinc-200 dark:bg-zinc-700 peer-checked:bg-zinc-600 rounded-full
                      after:absolute after:content-[''] after:w-[25px] sm:after:w-[30px] after:h-[25px] sm:after:h-[30px]
                      after:bg-gradient-to-r after:from-orange-500 after:to-yellow-400
                      peer-checked:after:from-zinc-800 peer-checked:after:to-zinc-900
                      after:rounded-full after:top-[2.5px] sm:after:top-[2.5px] after:left-[5px]
                      peer-checked:after:translate-x-[calc(100%+10px)] sm:peer-checked:after:translate-x-[calc(100%+12px)]
                      shadow-inner after:shadow-md transition-all duration-300 after:transition-all after:duration-300">
          </div>
          <svg class="fill-zinc-100 absolute w-4 sm:w-5 h-4 sm:h-5 left-[8px] sm:left-[10px] top-1/2 -translate-y-1/2 opacity-100 peer-checked:opacity-0 transition-opacity duration-300" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path d="M12,17c-2.76,0-5-2.24-5-5s2.24-5,5-5,5,2.24,5,5-2.24,5-5,5ZM13,0h-2V5h2V0Zm0,19h-2v5h2v-5ZM5,11H0v2H5v-2Zm19,0h-5v2h5v-2Zm-2.81-6.78l-1.41-1.41-3.54,3.54,1.41,1.41,3.54-3.54ZM7.76,17.66l-1.41-1.41-3.54,3.54,1.41,1.41,3.54-3.54Zm0-11.31l-3.54-3.54-1.41,1.41,3.54,3.54,1.41-1.41Zm13.44,13.44l-3.54-3.54-1.41,1.41,3.54,3.54,1.41-1.41Z"></path>
          </svg>
          <svg class="fill-slate-300 absolute w-4 sm:w-5 h-4 sm:h-5 right-[8px] sm:right-[10px] top-1/2 -translate-y-1/2 opacity-0 peer-checked:opacity-100 transition-opacity duration-300" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path d="M12.009,24A12.067,12.067,0,0,1,.075,10.725,12.121,12.121,0,0,1,10.1.152a13,13,0,0,1,5.03.206,2.5,2.5,0,0,1,1.8,1.8,2.47,2.47,0,0,1-.7,2.425c-4.559,4.168-4.165,10.645.807,14.412h0a2.5,2.5,0,0,1-.7,4.319A13.875,13.875,0,0,1,12.009,24Zm.074-22a10.776,10.776,0,0,0-1.675.127,10.1,10.1,0,0,0-8.344,8.8A9.928,9.928,0,0,0,4.581,18.7a10.473,10.473,0,0,0,11.093,2.734.5.5,0,0,0,.138-.856h0C9.883,16.1,9.417,8.087,14.865,3.124a.459.459,0,0,0,.127-.465.491.491,0,0,0-.356-.362A10.68,10.68,0,0,0,12.083,2ZM20.5,12a1,1,0,0,1-.97-.757l-.358-1.43L17.74,9.428a1,1,0,0,1,.035-1.94l1.4-.325.351-1.406a1,1,0,0,1,1.94,0l.355,1.418,1.418.355a1,1,0,0,1,0,1.94l-1.418.355-.355,1.418A1,1,0,0,1,20.5,12ZM16,14a1,1,0,0,0,2,0A1,1,0,0,0,16,14Zm6,4a1,1,0,0,0,2,0A1,1,0,0,0,22,18Z"></path>
          </svg>
        </label>
      </div>
      <div class="block sm:hidden">
        <button id="mobile-menu-btn" class="p-2 transition-colors text-zinc-700 dark:text-zinc-300 hover:text-blue-600 dark:hover:text-blue-400 focus:outline-none">
          <i class="text-2xl ri-menu-fill"></i>
        </button>
      </div>
    </nav>

    <div id="mobile-menu" class="hidden px-4 py-5 bg-white border-t shadow-lg sm:hidden dark:bg-zinc-800 border-zinc-200 dark:border-zinc-700">
      <div class="flex flex-col gap-4">
        <a class="block py-2 text-base font-medium transition-colors text-zinc-700 hover:text-blue-600 dark:text-zinc-300 dark:hover:text-blue-400" href="/">Home</a>
        <a class="block py-2 text-base font-medium transition-colors text-zinc-700 hover:text-blue-600 dark:text-zinc-300 dark:hover:text-blue-400" href="/create">Create Hisaab</a>
        <a class="block py-2 text-base font-medium transition-colors text-zinc-700 hover:text-blue-600 dark:text-zinc-300 dark:hover:text-blue-400" href="/logout">Logout</a>
        <div class="flex justify-between items-center py-2">
          <span class="text-base font-medium text-zinc-700 dark:text-zinc-300">Theme:</span>
          <label class="inline-flex relative items-center cursor-pointer">
            <input class="sr-only peer" id="toggle-theme-mobile" type="checkbox" />
            <div class="relative w-[70px] h-[30px] bg-zinc-200 dark:bg-zinc-700 peer-checked:bg-zinc-600 rounded-full
                      after:absolute after:content-[''] after:w-[25px] after:h-[25px]
                      after:bg-gradient-to-r after:from-orange-500 after:to-yellow-400
                      peer-checked:after:from-zinc-800 peer-checked:after:to-zinc-900
                      after:rounded-full after:top-[2.5px] after:left-[5px]
                      peer-checked:after:translate-x-[calc(100%+10px)]
                      shadow-inner after:shadow-md transition-all duration-300 after:transition-all after:duration-300">
            </div>
          </label>
        </div>
      </div>
    </div>

    <div class="p-4 mx-auto max-w-3xl sm:p-6 lg:p-10">
      <h1 class="mb-8 text-2xl font-semibold text-center sm:text-3xl sm:mb-10 text-zinc-800 dark:text-zinc-100">
        <i class="mr-2 align-middle ri-edit-box-line"></i>Edit Your Hisaab
      </h1>

      <% if(typeof error !== 'undefined' && error) {%> <div class="flex gap-3 items-center px-4 py-3 mb-6 text-sm text-red-700 bg-red-100 rounded-lg border border-red-400 shadow dark:bg-red-900/30 dark:border-red-600 dark:text-red-300 sm:text-base">
        <i class="text-xl ri-error-warning-fill"></i>
        <p><%= error %></p>
      </div>
      <% } %>

      <form class="p-6 space-y-6 w-full bg-white rounded-xl shadow-2xl dark:bg-zinc-800 sm:p-8 sm:space-y-8" action="/update/<%= filename %>" method="POST">
        <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
          <div>
            <label class="block mb-1.5 text-sm font-medium text-zinc-700 dark:text-zinc-300" for="filename">Filename (Cannot be changed)</label>
            <input id="filename" class="px-4 py-2.5 w-full rounded-lg border cursor-not-allowed outline-none border-zinc-300 dark:border-zinc-600 bg-zinc-200 dark:bg-zinc-700 text-zinc-600 dark:text-zinc-400" type="text" name="filename" value="<%= filename %>" readonly />
          </div>

          <div>
            <label class="block mb-1.5 text-sm font-medium text-zinc-700 dark:text-zinc-300" for="title">Title <span class="text-red-500">*</span></label>
            <input id="title" class="px-4 py-2.5 w-full rounded-lg border transition-all outline-none border-zinc-300 dark:border-zinc-600 bg-zinc-50 dark:bg-zinc-700 text-zinc-900 dark:text-white placeholder-zinc-400 dark:placeholder-zinc-500 focus:ring-2 focus:ring-blue-500 focus:border-blue-500" type="text" name="title" value="<%= title %>" required />
          </div>
        </div>

        <div>
          <label class="block mb-1.5 text-sm font-medium text-zinc-700 dark:text-zinc-300" for="hisaab-content">Hisaab Content <span class="text-red-500">*</span></label>
          <textarea id="hisaab-content" name="filedata" rows="10" placeholder="Enter your Hisaab details here..." class="w-full px-4 py-2.5 border border-zinc-300 dark:border-zinc-600 rounded-lg bg-zinc-50 dark:bg-zinc-700 text-zinc-900 dark:text-white placeholder-zinc-400 dark:placeholder-zinc-500 outline-none resize-y focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all min-h-[200px] sm:min-h-[250px]"><%= data.trim() %></textarea>
        </div>

        <div class="grid grid-cols-1 gap-6 items-center sm:grid-cols-2">
          <div class="p-3 rounded-lg border bg-zinc-50 dark:bg-zinc-700/50 border-zinc-200 dark:border-zinc-700">
            <input id="isShareable" type="checkbox" name="isShareable" class="sr-only peer peer-checkbox" <% if (typeof isShareable !== 'undefined' && isShareable) { %> checked <% } %> />
            <label for="isShareable" class="flex gap-2.5 items-center text-sm font-medium cursor-pointer select-none text-zinc-700 dark:text-zinc-300">
              <span class="flex relative justify-center items-center w-5 h-5 rounded-md border transition-all custom-checkbox-visual bg-zinc-100 dark:bg-zinc-600 border-zinc-400 dark:border-zinc-500 peer-checked:bg-blue-600 peer-checked:border-blue-600 peer-focus:ring-2 peer-focus:ring-blue-500 peer-focus:ring-offset-2 dark:peer-focus:ring-offset-zinc-800">
              </span>
              Make Hisaab Shareable?
            </label>
          </div>

          <div class="p-3 rounded-lg border bg-zinc-50 dark:bg-zinc-700/50 border-zinc-200 dark:border-zinc-700">
            <input id="isEncrypted" type="checkbox" name="isEncrypted" class="sr-only peer peer-checkbox" <% if (typeof isEncrypted !== 'undefined' && isEncrypted) { %> checked <% } %> />
            <label for="isEncrypted" class="flex gap-2.5 items-center text-sm font-medium cursor-pointer select-none text-zinc-700 dark:text-zinc-300">
              <span class="flex relative justify-center items-center w-5 h-5 rounded-md border transition-all custom-checkbox-visual bg-zinc-100 dark:bg-zinc-600 border-zinc-400 dark:border-zinc-500 peer-checked:bg-blue-600 peer-checked:border-blue-600 peer-focus:ring-2 peer-focus:ring-blue-500 peer-focus:ring-offset-2 dark:peer-focus:ring-offset-zinc-800">
              </span>
              Encrypt this Hisaab?
            </label>
          </div>
        </div>

        <div class="<% if (typeof isEncrypted === 'undefined' || !isEncrypted) { %>hidden<% } else { %>flex<% } %> flex-col gap-1.5" id="passwordDiv">
          <label class="block text-sm font-medium text-zinc-700 dark:text-zinc-300" for="password">
            Passcode (Enter new or current passcode)
            <% if (typeof isEncrypted !== 'undefined' && isEncrypted) { %> <span class="text-red-500">*</span> <% } %>
          </label>
          <div class="relative">
            <input id="password" type="password" name="ePassword" minlength="5" class="px-4 py-2.5 pr-12 w-full rounded-lg border transition-all outline-none border-zinc-300 dark:border-zinc-600 bg-zinc-50 dark:bg-zinc-700 text-zinc-900 dark:text-white placeholder-zinc-400 dark:placeholder-zinc-500 focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="Enter new passcode (optional)" <%# Note: 'required' attribute on password for 'edit' is tricky. %> <%# If it's already encrypted, changing other details might not require re-entering password unless they uncheck and recheck encryption. %> <%# The JS will make it required if 'isEncrypted' is checked. %> />
            <button type="button" id="password-toggle-button" class="flex absolute top-0 right-0 items-center px-4 h-full transition-colors text-zinc-500 dark:text-zinc-400 hover:text-blue-600 dark:hover:text-blue-400" aria-label="Toggle password visibility">
              <i id="eye" class="text-xl ri-eye-line"></i>
              <i id="eye-off" class="hidden text-xl ri-eye-off-line"></i>
            </button>
          </div>
          <p class="mt-1 text-xs text-zinc-500 dark:text-zinc-400">If encrypted, provide a new 5+ char passcode to change it. Unchecking "Encrypt" will remove encryption.</p>
        </div>

        <div class="pt-4">
          <input type="submit" value="Update Hisaab" class="w-full sm:w-auto px-8 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg cursor-pointer transition-all duration-300 font-semibold text-base focus:outline-none focus:ring-4 focus:ring-blue-300 dark:focus:ring-blue-800 transform hover:scale-[1.02] active:scale-[0.98]" />
        </div>
      </form>
    </div>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      // Mobile menu (consistent with other pages)
      const mobileMenuBtn = document.getElementById("mobile-menu-btn");
      const mobileMenu = document.getElementById("mobile-menu");
      const menuIcon = mobileMenuBtn.querySelector("i");

      mobileMenuBtn.addEventListener("click", () => {
        mobileMenu.classList.toggle("hidden");
        menuIcon.className = mobileMenu.classList.contains("hidden") ? "ri-menu-fill text-2xl" : "ri-close-large-line text-2xl";
      });

      // Theme toggle (consistent with other pages)
      const toggleButton = document.getElementById("toggle-theme");
      const toggleButtonMobile = document.getElementById("toggle-theme-mobile");

      const applyThemePreference = (isDark) => {
        document.documentElement.classList.toggle("dark", isDark);
        if (toggleButton) toggleButton.checked = isDark;
        if (toggleButtonMobile) toggleButtonMobile.checked = isDark;
      };
      const initTheme = () => {
        const savedTheme = localStorage.theme;
        const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
        applyThemePreference(savedTheme === "dark" || (!savedTheme && prefersDark));
      };
      initTheme();
      const handleThemeToggle = (event) => {
        const isDark = event.target.checked;
        localStorage.theme = isDark ? "dark" : "light";
        applyThemePreference(isDark);
      };
      if (toggleButton) toggleButton.addEventListener("click", handleThemeToggle);
      if (toggleButtonMobile) toggleButtonMobile.addEventListener("click", handleThemeToggle);

      // Password visibility and field toggle
      const encryptedCheckbox = document.getElementById('isEncrypted');
      const passwordDiv = document.getElementById('passwordDiv');
      const passwordInput = document.getElementById('password'); // Specific ID
      const passwordToggleButton = document.getElementById('password-toggle-button');
      const eyeIcon = document.getElementById("eye");
      const eyeOffIcon = document.getElementById("eye-off");

      if (passwordToggleButton && passwordInput && eyeIcon && eyeOffIcon) {
        passwordToggleButton.addEventListener("click", () => {
          const isPassword = passwordInput.type === "password";
          passwordInput.type = isPassword ? "text" : "password";
          eyeIcon.style.display = isPassword ? "none" : "block";
          eyeOffIcon.style.display = isPassword ? "block" : "none";
        });
      }

      if (encryptedCheckbox && passwordDiv && passwordInput) {
        const togglePasswordDivVisibility = () => {
          const isChecked = encryptedCheckbox.checked;
          passwordDiv.classList.toggle('hidden', !isChecked);
          passwordDiv.classList.toggle('flex', isChecked);
          // For an edit form, 'required' logic for password can be complex.
          // If already encrypted and user doesn't want to change password, it shouldn't be required.
          // If user checks "encrypt" for the first time (or re-checks), it should be required.
          // If user unchecks, it's not required.
          // Current EJS handles initial visibility. JS handles dynamic changes.
          if (isChecked) {
            // If checking it now and it was previously unencrypted, or if no password value is set (placeholder for new)
            // you might want to enforce 'required' if the password field is empty.
            // For simplicity here, we'll make it required if the div is visible and the intention is to encrypt/re-encrypt.
            // The backend should handle logic for "password not provided but encryption is on".
            passwordInput.required = true; // Simplification: if encrypt is checked, a password (new or old) is expected conceptually.
            // Backend will need to be smart about empty password meaning "keep old" or "error".
            // OR, if you want to force a new password on checking "encrypt":
            // passwordInput.placeholder = "Enter new 5+ char passcode";
          } else {
            passwordInput.required = false;
            // passwordInput.value = ''; // Don't clear value on uncheck in edit form, user might re-check.
            if (passwordInput.type === "text") { // Reset eye icon if unchecking
              eyeOffIcon.style.display = "none";
              eyeIcon.style.display = "block";
              passwordInput.type = "password";
            }
          }
        };

        // Initial state is set by EJS, so JS only needs to handle changes.
        encryptedCheckbox.addEventListener('change', togglePasswordDivVisibility);

        // If initially checked, ensure 'required' is true.
        if (encryptedCheckbox.checked) {
          passwordInput.required = true;
        }
      }
    });
  </script>
</body>

</html>